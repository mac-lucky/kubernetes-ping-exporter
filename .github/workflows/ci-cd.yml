---
name: CI/CD Pipeline - Kubernetes Ping Exporter

on:
  push:
    branches: ["master"]
    paths-ignore:
      - "*.md"
      - "LICENSE"
      - ".gitignore"
  pull_request:
    branches: ["master"]
    paths-ignore:
      - "*.md"
      - "LICENSE"
      - ".gitignore"
  release:
    types: [published]
  workflow_dispatch:

jobs:
  # Custom Kubernetes integration tests specific to ping-exporter
  kubernetes-ping-exporter-test:
    name: CI/CD Pipeline / Kubernetes Integration Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Extract Go version from go.mod
        id: go-version
        run: |
          GO_VERSION=$(grep "^go " go.mod | cut -d' ' -f2)
          echo "Found Go version: $GO_VERSION"
          echo "version=$GO_VERSION" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container for testing
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          tags: kubernetes-ping-exporter:test
          push: false
          load: true
          build-args: |
            GO_VERSION=${{ steps.go-version.outputs.version }}

      - name: Setup Minikube with 2 nodes
        uses: medyagh/setup-minikube@latest
        with:
          minikube-version: 'latest'
          driver: docker
          container-runtime: docker
          kubernetes-version: v1.32.0
          cpus: 2
          memory: 2048m
          addons: metrics-server
          start-args: '--nodes=2'

      - name: Load Docker image into Minikube
        run: |
          minikube image load kubernetes-ping-exporter:test

      - name: Create monitoring namespace
        run: |
          kubectl create namespace monitoring || true

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Deploy ping-exporter with Helm
        run: |
          helm upgrade --install ping-exporter ./infra-ping-exporter \
            --namespace monitoring \
            --set image.tag=test \
            --set image.repository=kubernetes-ping-exporter \
            --set image.pullPolicy=Never \
            --set serviceMonitor.enabled=false \
            --wait --timeout=300s

      - name: Verify deployment
        run: |
          echo "=== Checking deployment status ==="
          kubectl get pods -n monitoring -l app=ping-exporter -o wide
          kubectl get services -n monitoring
          kubectl get configmap -n monitoring

      - name: Wait for pods to be ready
        run: |
          kubectl wait --for=condition=ready pod -l app=ping-exporter \
            -n monitoring --timeout=120s

      - name: Check logs
        run: |
          sleep 30
          echo "=== Application logs ==="
          kubectl logs -l app=ping-exporter -n monitoring --tail=50

      - name: Test metrics endpoint via port-forward
        run: |
          echo "=== Testing metrics endpoint ==="
          kubectl port-forward -n monitoring svc/ping-exporter 9107:9107 &
          PF_PID=$!
          sleep 10
          # Test metrics endpoint
          response=$(curl -s http://localhost:9107/metrics)
          if echo "$response" | grep -q "ping_loss_ratio"; then
            echo "✅ Metrics endpoint working - ping_loss_ratio found"
            echo "Sample metrics:"
            echo "$response" | head -20
          else
            echo "❌ Metrics endpoint not working - ping_loss_ratio not found"
            echo "Response received:"
            echo "$response"
            exit 1
          fi
          
          # Cleanup
          kill $PF_PID || true

      - name: Cleanup
        if: always()
        run: |
          helm uninstall ping-exporter -n monitoring || true
          kubectl delete namespace monitoring || true

  # Run CI/CD after tests pass
  ci-cd:
    name: CI/CD Pipeline
    needs: kubernetes-ping-exporter-test
    uses: mac-lucky/actions-shared-workflows/.github/workflows/go-cicd-reusable.yml@master
    permissions:
      contents: read
      packages: write
      security-events: write
    with:
      # Required parameters
      app_name: "kubernetes-ping-exporter"
      dockerhub_image: "maclucky/kubernetes-ping-exporter"
      ghcr_image: "ghcr.io/mac-lucky/kubernetes-ping-exporter"
      
      # Build configuration
      dockerfile_path: "./Dockerfile"
      build_context: "."
      
      # Test configuration
      enable_container_tests: false
      enable_kubernetes_tests: false
      helm_chart_path: "./infra-ping-exporter"
      helm_release_name: "ping-exporter"
      app_label_selector: "ping-exporter"
      
      # Security and quality
      enable_security_scan: true
      enable_sbom: true
      
      # Deployment
      enable_auto_version: true
      push_on_main: true
    secrets:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}